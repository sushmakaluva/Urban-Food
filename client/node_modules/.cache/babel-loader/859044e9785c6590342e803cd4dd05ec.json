{"ast":null,"code":"var _jsxFileName = \"/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from \"axios\"; // import Grid from '@material-ui/core/Grid';\n\nimport RestauCard from './RestauCard';\nimport { CityContext } from \"../utils/CityContext\";\nexport default function LocalRestaurants() {\n  const [coordinates, setCoordinates] = useState({\n    latitude: \"\",\n    longitude: \"\"\n  });\n  const [localRestaurants, setLocalRestaurants] = useState([]);\n  const {\n    cityDetails\n  } = useContext(CityContext);\n  const {\n    city_id\n  } = cityDetails;\n  useEffect(() => {\n    getLocation();\n  }, [coordinates]);\n  useEffect(() => {\n    getLocalRestaurants(coordinates.latitude, coordinates.longitude, city_id);\n  }, [coordinates]);\n\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      // console.log(\"latitude is :\", position.coords.latitude);\n      // console.log(\"longitude is :\", position.coords.longitude);\n      setCoordinates({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 10000\n    });\n  }\n\n  const getLocalRestaurants = (latitude, longitude, city_id) => {\n    let queryString = '';\n    if (city_id) queryString = `city_id=${city_id}`;else if (latitude && longitude) queryString = `lat=${latitude}&lon=${longitude}`;else return;\n    axios.get(`https://developers.zomato.com/api/v2.1/search?${queryString}`, {\n      headers: {\n        \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n      }\n    }).then(res => {\n      setLocalRestaurants(res.data.restaurants);\n      console.log(\"local resto\", res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n  return localRestaurants.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: headingStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Local Restaurants Nearby\"), /*#__PURE__*/React.createElement(RestauCard, {\n    localRestaurants: localRestaurants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js"],"names":["React","useState","useEffect","useContext","axios","RestauCard","CityContext","LocalRestaurants","coordinates","setCoordinates","latitude","longitude","localRestaurants","setLocalRestaurants","cityDetails","city_id","getLocation","getLocalRestaurants","navigator","geolocation","getCurrentPosition","position","coords","error","console","code","message","enableHighAccuracy","timeout","maximumAge","queryString","get","headers","then","res","data","restaurants","log","catch","err","headingStyle","textAlign","margin","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,useContext } from 'react';\nimport axios from \"axios\";\n// import Grid from '@material-ui/core/Grid';\nimport RestauCard from './RestauCard';\nimport { CityContext } from \"../utils/CityContext\";\n\nexport default function LocalRestaurants() {\n\n  const [coordinates, setCoordinates] = useState({ latitude: \"\", longitude: \"\" });\n  const [localRestaurants, setLocalRestaurants] = useState([]);\n  const { cityDetails } = useContext(CityContext);\n  const { city_id} = cityDetails;\n\n  useEffect(() => {\n    getLocation();\n  }, [coordinates])\n\n  useEffect(() => {\n    getLocalRestaurants(coordinates.latitude, coordinates.longitude,city_id);\n  }, [coordinates])\n\n  function getLocation() {\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(\"latitude is :\", position.coords.latitude);\n        // console.log(\"longitude is :\", position.coords.longitude);\n        setCoordinates({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n      },\n        function (error) {\n          console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n        },\n        {\n          enableHighAccuracy: false,\n          timeout: 10000,\n          maximumAge: 10000\n        }\n      );\n  }\n\n  const getLocalRestaurants = (latitude, longitude, city_id) => {\n\n    let queryString = '';\n    if (city_id) queryString = `city_id=${city_id}`\n    else if (latitude && longitude) queryString = `lat=${latitude}&lon=${longitude}`\n    else return;\n\n    axios.get(`https://developers.zomato.com/api/v2.1/search?${queryString}`, {\n      headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n    })\n      .then(res => {\n        setLocalRestaurants(res.data.restaurants)\n        console.log(\"local resto\",res.data)\n      })\n      .catch(err => console.log(err));\n  }\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n\n  return (\n    localRestaurants.length>0 &&\n    (<div>\n      <h3 style={headingStyle}>Local Restaurants Nearby</h3>\n      <RestauCard localRestaurants={localRestaurants} />\n    </div>\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}