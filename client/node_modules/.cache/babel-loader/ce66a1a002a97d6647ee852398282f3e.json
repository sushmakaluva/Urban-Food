{"ast":null,"code":"var _jsxFileName = \"/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport default function LocalRestaurants() {\n  const [coordinates, setcoordinates] = useState({\n    Latitude: \"\"\n  });\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      setcoordinates({\n        \"coordinates.Latitude\": position.coords.latitude,\n        \"coordinates.Longitude\": position.coords.longitude\n      });\n      console.log(coordinates.Latitude);\n      sendGetRestaurant(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 10000\n    });\n  }\n\n  const sendGetRestaurant = async (Latitude, Longitude) => {\n    console.log(Latitude, Longitude);\n\n    try {\n      const resp = await axios.get('https://developers.zomato.com/api/v2.1/search?lat=' + Latitude + '&lon=' + Longitude, {\n        headers: {\n          \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n        }\n      });\n      console.log(resp.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: headingStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Local Restaurants Nearby\"));\n}","map":{"version":3,"sources":["/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js"],"names":["React","useState","useEffect","axios","LocalRestaurants","coordinates","setcoordinates","Latitude","getLocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","sendGetRestaurant","error","code","message","enableHighAccuracy","timeout","maximumAge","Longitude","resp","get","headers","data","err","headingStyle","textAlign","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAEzC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC;AAACM,IAAAA,QAAQ,EAAC;AAAV,GAAD,CAA9C;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAAuB;AACrBC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAAQ,CAACG,MAAT,CAAgBC,QAA7C;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAAQ,CAACG,MAAT,CAAgBE,SAA9C;AACAX,MAAAA,cAAc,CAAC;AACb,gCAAwBM,QAAQ,CAACG,MAAT,CAAgBC,QAD3B;AAEb,iCAAyBJ,QAAQ,CAACG,MAAT,CAAgBE;AAF5B,OAAD,CAAd;AAIAJ,MAAAA,OAAO,CAACC,GAAR,CAAYT,WAAW,CAACE,QAAxB;AACAW,MAAAA,iBAAiB,CAACN,QAAQ,CAACG,MAAT,CAAgBC,QAAjB,EAA0BJ,QAAQ,CAACG,MAAT,CAAgBE,SAA1C,CAAjB;AACD,KAVH,EAWE,UAAUE,KAAV,EAAiB;AACfN,MAAAA,OAAO,CAACM,KAAR,CAAc,kBAAkBA,KAAK,CAACC,IAAxB,GAA+B,KAA/B,GAAuCD,KAAK,CAACE,OAA3D;AACD,KAbH,EAcE;AACEC,MAAAA,kBAAkB,EAAE,KADtB;AAEEC,MAAAA,OAAO,EAAE,KAFX;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAdF;AAoBD;;AAED,QAAMN,iBAAiB,GAAG,OAAOX,QAAP,EAAgBkB,SAAhB,KAA8B;AACtDZ,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAAqBkB,SAArB;;AACA,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAU,uDAAuDpB,QAAvD,GAAkE,OAAlE,GAA4EkB,SAAtF,EAAiG;AAClHG,QAAAA,OAAO,EAAE;AAAE,sBAAY;AAAd;AADyG,OAAjG,CAAnB;AAGAf,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAI,CAACG,IAAjB;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZjB,MAAAA,OAAO,CAACM,KAAR,CAAcW,GAAd;AACD;AACF,GAVD;;AAYA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,SAAS,EAAE,MADQ;AAEnBC,IAAAA,MAAM,EAAE;AAFW,GAArB;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,KAAK,EAAEF,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF;AAMD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\nexport default function LocalRestaurants() {\n\n  const [coordinates, setcoordinates] = useState({Latitude:\"\"});\n\n  useEffect(() => {\n    getLocation();\n  }, [])\n\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log(\"Latitude is :\", position.coords.latitude);\n        console.log(\"Longitude is :\", position.coords.longitude);\n        setcoordinates({\n          \"coordinates.Latitude\": position.coords.latitude,\n          \"coordinates.Longitude\": position.coords.longitude\n        })\n        console.log(coordinates.Latitude)\n        sendGetRestaurant(position.coords.latitude,position.coords.longitude);\n      },\n      function (error) {\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n      },\n      {\n        enableHighAccuracy: false,\n        timeout: 10000,\n        maximumAge: 10000\n      }\n    );\n  }\n\n  const sendGetRestaurant = async (Latitude,Longitude) => {\n    console.log(Latitude,Longitude);\n    try {\n      const resp = await axios.get('https://developers.zomato.com/api/v2.1/search?lat=' + Latitude + '&lon=' + Longitude, {\n        headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n      });\n      console.log(resp.data);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n\n  return (\n    <div>\n      <h3 style={headingStyle}>Local Restaurants Nearby</h3>\n\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}