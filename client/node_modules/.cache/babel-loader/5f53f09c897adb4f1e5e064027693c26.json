{"ast":null,"code":"var _jsxFileName = \"/Users/sushma/code/Urban-Food/client/src/components/SearchBar.js\";\nimport React, { useState, useContext } from 'react';\nimport axios from \"axios\";\nimport { InputAdornment, TextField, IconButton, MenuItem } from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport RoomIcon from '@material-ui/icons/Room';\nimport { CityContext } from \"../utils/CityContext\";\nimport { Typeahead } from 'react-bootstrap-typeahead'; // import Select from 'react-select';\n\nexport default function SearchBar(props) {\n  const [selectedCity, setSelectedCity] = useState([]);\n  const {\n    cityDetails,\n    setCityDetails\n  } = useContext(CityContext);\n  const [location, setLocation] = useState('');\n  const [searchKeyword, setSearchKeyword] = useState();\n  const [locationSuggestions, setLocationSuggestions] = useState([{\n    city_name: \"kamal\"\n  }]);\n  const searchLocationStyle = {\n    backgroundColor: \"white\",\n    width: \"20%\",\n    marginBottom: \"20px\",\n    border: \"none\"\n  };\n  const searchBarStyle = {\n    backgroundColor: \"white\",\n    width: \"40%\",\n    marginBottom: \"30px\",\n    border: \"none\"\n  };\n\n  const locationOnChange = e => {\n    console.log(e);\n    setLocation(e.target.value);\n    getLocationSuggestions(location);\n    getCityId(location);\n  };\n\n  const foo = () => {\n    console.log('fooooo');\n  };\n\n  const SearchOnChange = e => {\n    setSearchKeyword(e.target.value);\n  };\n\n  const getCityId = location => {\n    axios.get('https://developers.zomato.com/api/v2.1/locations?query=' + location, {\n      headers: {\n        \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n      }\n    }).then(res => {\n      console.log(\"getCityId response\", res.data);\n\n      if (res.data.location_suggestions.length > 0) {\n        setCityDetails({\n          city_id: res.data.location_suggestions[0].city_id,\n          city_name: res.data.location_suggestions[0].city_name,\n          lat: res.data.location_suggestions[0].latitude,\n          long: res.data.location_suggestions[0].longitude\n        });\n      }\n    }).catch(err => console.log(err));\n  };\n\n  const getLocationSuggestions = locationKeyword => {\n    if (!locationKeyword) return 'Toronto';\n    axios.get('https://developers.zomato.com/api/v2.1/locations?count=10&query=' + locationKeyword, {\n      headers: {\n        \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n      }\n    }).then(res => {\n      console.log(\"Location suggestions response\", res.data);\n      setLocationSuggestions(res.data.location_suggestions);\n    }).catch(err => console.log(err));\n  }; // const options = [\"kamal\", \"foo\", \"toka\", \"bankachekka\"]\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-typeahead-single\",\n    onChange: setSelectedCity,\n    labelKey: option => `${option.city_name}`,\n    options: locationSuggestions,\n    placeholder: \"Select city...\",\n    selected: selectedCity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-full-width\",\n    placeholder: \"Search for a restaurant, cuisine or a dish\",\n    value: searchKeyword,\n    onChange: SearchOnChange,\n    autoComplete: \"on\",\n    variant: \"outlined\",\n    style: searchBarStyle,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SearchIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/sushma/code/Urban-Food/client/src/components/SearchBar.js"],"names":["React","useState","useContext","axios","InputAdornment","TextField","IconButton","MenuItem","SearchIcon","ArrowDropDownIcon","RoomIcon","CityContext","Typeahead","SearchBar","props","selectedCity","setSelectedCity","cityDetails","setCityDetails","location","setLocation","searchKeyword","setSearchKeyword","locationSuggestions","setLocationSuggestions","city_name","searchLocationStyle","backgroundColor","width","marginBottom","border","searchBarStyle","locationOnChange","e","console","log","target","value","getLocationSuggestions","getCityId","foo","SearchOnChange","get","headers","then","res","data","location_suggestions","length","city_id","lat","latitude","long","longitude","catch","err","locationKeyword","option","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport axios from \"axios\";\nimport { InputAdornment, TextField, IconButton, MenuItem } from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport RoomIcon from '@material-ui/icons/Room';\nimport { CityContext } from \"../utils/CityContext\";\nimport { Typeahead } from 'react-bootstrap-typeahead';\n// import Select from 'react-select';\n\nexport default function SearchBar(props) {\n\n  const [selectedCity, setSelectedCity] = useState([]);\n  const { cityDetails, setCityDetails } = useContext(CityContext);\n\n  const [location, setLocation] = useState('');\n  const [searchKeyword, setSearchKeyword] = useState();\n  const [locationSuggestions, setLocationSuggestions] = useState([{ city_name: \"kamal\" }]);\n\n  const searchLocationStyle = { backgroundColor: \"white\", width: \"20%\", marginBottom: \"20px\", border: \"none\" };\n\n  const searchBarStyle = { backgroundColor: \"white\", width: \"40%\", marginBottom: \"30px\", border: \"none\" }\n\n  const locationOnChange = (e) => {\n    console.log(e)\n    setLocation(e.target.value)\n    getLocationSuggestions(location)\n    getCityId(location);\n  }\n\n  const foo = () => {\n    console.log('fooooo');\n  }\n\n  const SearchOnChange = (e) => {\n    setSearchKeyword(e.target.value)\n  }\n\n  const getCityId = (location) => {\n    axios.get('https://developers.zomato.com/api/v2.1/locations?query=' + location, {\n      headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n    })\n      .then(res => {\n        console.log(\"getCityId response\", res.data)\n        if (res.data.location_suggestions.length > 0) {\n          setCityDetails(\n            {\n              city_id: res.data.location_suggestions[0].city_id,\n              city_name: res.data.location_suggestions[0].city_name,\n              lat: res.data.location_suggestions[0].latitude,\n              long: res.data.location_suggestions[0].longitude\n            })\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  const getLocationSuggestions = (locationKeyword) => {\n    if (!locationKeyword) return 'Toronto';\n    axios.get('https://developers.zomato.com/api/v2.1/locations?count=10&query=' + locationKeyword, {\n      headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n    })\n      .then(res => {\n        console.log(\"Location suggestions response\", res.data)\n        setLocationSuggestions(res.data.location_suggestions)\n      })\n      .catch(err => console.log(err));\n  }\n\n  // const options = [\"kamal\", \"foo\", \"toka\", \"bankachekka\"]\n\n  return (\n    <div>\n      <span>\n        {/* <Select\n          options={locationSuggestions}\n          value={location}\n          onClick={locationOnChange}\n        /> */}\n\n        <Typeahead\n          id=\"basic-typeahead-single\"\n          onChange={setSelectedCity}\n          labelKey={(option) => `${option.city_name}`}\n          options={locationSuggestions}\n          placeholder=\"Select city...\"\n          selected={selectedCity}\n        />\n\n        {/* <TextField\n          id=\"standard-half-width\"\n          placeholder=\"Location\"\n          value={location}\n          // options={locationSuggestions}\n          onChange={locationOnChange}\n          autoComplete=\"on\"\n          variant=\"outlined\"\n          style={searchLocationStyle}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <RoomIcon />\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton>\n                  <ArrowDropDownIcon />\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        >\n           {locationSuggestions.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.value}\n            </MenuItem>\n          ))}\n          </TextField> */}\n\n\n        <TextField\n          id=\"standard-full-width\"\n          placeholder=\"Search for a restaurant, cuisine or a dish\"\n          value={searchKeyword}\n          onChange={SearchOnChange}\n          autoComplete=\"on\"\n          variant=\"outlined\"\n          style={searchBarStyle}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton>\n                  <SearchIcon />\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n      </span>\n      {/* {console.log(location)} */}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}