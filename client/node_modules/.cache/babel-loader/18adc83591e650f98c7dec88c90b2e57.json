{"ast":null,"code":"var _jsxFileName = \"/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\"; // import Grid from '@material-ui/core/Grid';\n\nimport RestauCard from './RestauCard';\nexport default function LocalRestaurants() {\n  const [coordinates, setCoordinates] = useState({\n    latitude: \"\",\n    longitude: \"\"\n  });\n  const [localRestaurants, setLocalRestaurants] = useState([]);\n  useEffect(() => {\n    getLocation();\n  }, []);\n  useEffect(() => {\n    getLocalRestaurants(coordinates.latitude, coordinates.longitude);\n  }, [coordinates]);\n\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      // console.log(\"latitude is :\", position.coords.latitude);\n      // console.log(\"longitude is :\", position.coords.longitude);\n      setCoordinates({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 10000\n    });\n  }\n\n  const getLocalRestaurants = (latitude, longitude, city_id) => {\n    let queryString = '';\n    if (city_id) queryString = `city_id=${city_id}`;else queryString = `lat=${lat}&lon=${long}`;\n\n    if (latitude && longitude) {\n      axios.get('https://developers.zomato.com/api/v2.1/search?lat=' + latitude + '&lon=' + longitude, {\n        headers: {\n          \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n        }\n      }).then(res => {\n        setLocalRestaurants(res.data.restaurants);\n        console.log(res.data);\n      }).catch(err => console.log(err));\n    } else if (entity_id) {\n      axios.get('https://developers.zomato.com/api/v2.1/search?entity_id=' + entity_id, {\n        headers: {\n          \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\"\n        }\n      }).then(res => {\n        setLocalRestaurants(res.data.restaurants);\n        console.log(res.data);\n      }).catch(err => console.log(err));\n    }\n  };\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: headingStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Local Restaurants Nearby\"), /*#__PURE__*/React.createElement(RestauCard, {\n    localRestaurants: localRestaurants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sushma/code/Urban-Food/client/src/components/LocalRestaurants.js"],"names":["React","useState","useEffect","axios","RestauCard","LocalRestaurants","coordinates","setCoordinates","latitude","longitude","localRestaurants","setLocalRestaurants","getLocation","getLocalRestaurants","navigator","geolocation","getCurrentPosition","position","coords","error","console","code","message","enableHighAccuracy","timeout","maximumAge","city_id","queryString","lat","long","get","headers","then","res","data","restaurants","log","catch","err","entity_id","headingStyle","textAlign","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n// import Grid from '@material-ui/core/Grid';\nimport RestauCard from './RestauCard';\n\nexport default function LocalRestaurants() {\n\n  const [coordinates, setCoordinates] = useState({ latitude: \"\", longitude: \"\" });\n  const [localRestaurants, setLocalRestaurants] = useState([]);\n\n  useEffect(() => {\n    getLocation();\n  }, [])\n\n  useEffect(() => {\n    getLocalRestaurants(coordinates.latitude, coordinates.longitude);\n  }, [coordinates])\n\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition((position) => {\n      // console.log(\"latitude is :\", position.coords.latitude);\n      // console.log(\"longitude is :\", position.coords.longitude);\n      setCoordinates({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      })\n    },\n      function (error) {\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n      },\n      {\n        enableHighAccuracy: false,\n        timeout: 10000,\n        maximumAge: 10000\n      }\n    );\n  }\n\n  const getLocalRestaurants = (latitude, longitude,city_id) => {\n\n    let queryString = '';\n        if (city_id) queryString = `city_id=${city_id}`\n        else queryString = `lat=${lat}&lon=${long}`\n\n    if (latitude && longitude){\n      axios.get('https://developers.zomato.com/api/v2.1/search?lat=' + latitude + '&lon=' + longitude, {\n        headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n      })\n        .then(res => {\n          setLocalRestaurants(res.data.restaurants)\n          console.log(res.data)\n        })\n        .catch(err => console.log(err));\n    }\n\n    else if(entity_id){\n      axios.get('https://developers.zomato.com/api/v2.1/search?entity_id=' + entity_id, {\n        headers: { \"user-key\": \"7643451d5684bd9eb0116cdfd72673a9\" }\n      })\n        .then(res => {\n          setLocalRestaurants(res.data.restaurants)\n          console.log(res.data)\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  const headingStyle = {\n    textAlign: \"left\",\n    margin: \"20px\"\n  };\n\n  return (\n    <div>\n      <h3 style={headingStyle}>Local Restaurants Nearby</h3>\n      <RestauCard localRestaurants={localRestaurants}/>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}